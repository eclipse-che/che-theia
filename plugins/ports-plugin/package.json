{
  "name": "@eclipse-che/ports-plugin",
  "publisher": "Eclipse Che",
  "version": "0.0.1",
  "keywords": [
    "theia-plugin"
  ],
  "description": "Manage Eclipse Che Ports Plugin",
  "license": "EPL-2.0",
  "files": [
    "src",
    "resources"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "viewsContainers": {
      "right": [
        {
          "id": "endpoints",
          "title": "Endpoints",
          "icon": "resources/plug.svg"
        }
      ]
    },
    "views": {
      "endpoints": [
        {
          "id": "endpoints"
        }
      ]
    },
    "commands": [
      {
        "command": "portPlugin.filterOutPlugins",
        "title": "Hide plug-in endpoints",
        "icon": {
          "light": "resources/light/filter-off.svg",
          "dark": "resources/dark/filter-off.svg"
        }
      },
      {
        "command": "portPlugin.filterInPlugins",
        "title": "Show plug-in endpoints",
        "icon": {
          "light": "resources/light/filter-on.svg",
          "dark": "resources/dark/filter-on.svg"
        }
      },
      {
        "command": "portPlugin.openNewTabPort",
        "title": "Open in a new tab",
        "icon": {
          "light": "resources/light/external-link.svg",
          "dark": "resources/dark/external-link.svg"
        }
      },
      {
        "command": "portPlugin.copyClipboardUrl",
        "title": "Copy endpoint URL to clipboard",
        "icon": {
          "light": "resources/light/clipboard.svg",
          "dark": "resources/dark/clipboard.svg"
        }
      },
      {
        "command": "portPlugin.preview",
        "title": "Open in preview",
        "icon": {
          "light": "resources/light/eye.svg",
          "dark": "resources/dark/eye.svg"
        }
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "portPlugin.filterInPlugins",
          "when": "view == endpoints && !portPluginShowPlugins",
          "group": "navigation"
        },
        {
          "command": "portPlugin.filterOutPlugins",
          "when": "view == endpoints && portPluginShowPlugins",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "portPlugin.openNewTabPort",
          "when": "view == endpoints && viewItem == publicHttpsEndpointOnline || view == endpoints && viewItem == publicHttpPortOnline",
          "group": "inline"
        },
        {
          "command": "portPlugin.preview",
          "when": "view == endpoints && viewItem == publicHttpsEndpointOnline",
          "group": "inline"
        },
        {
          "command": "portPlugin.copyClipboardUrl",
          "when": "view == endpoints && viewItem == publicHttpEndpointOnline || view == endpoints && viewItem == publicHttpsEndpointOnline || view == endpoints && viewItem == publicPortOnline || view == endpoints && viewItem == publicDevfilePortOffline",
          "group": "inline"
        }
      ]
    }
  },
  "dependencies": {},
  "devDependencies": {
    "@eclipse-che/plugin": "0.0.1",
    "@theia/plugin": "next",
    "@theia/plugin-packager": "latest"
  },
  "scripts": {
    "prepare": "yarn clean && yarn build && yarn lint:fix && yarn test",
    "clean": "rimraf lib",
    "format": "if-env SKIP_FORMAT=true && echo 'skip format check' || prettier --check '{src,tests}/**/*.ts' package.json",
    "format:fix": "prettier --write '{src,tests}/**/*.ts' package.json",
    "lint": "if-env SKIP_LINT=true && echo 'skip lint check' || eslint --cache=true --no-error-on-unmatched-pattern=true '{src,tests}/**/*.ts'",
    "lint:fix": "eslint --fix --cache=true --no-error-on-unmatched-pattern=true \"{src,tests}/**/*.{ts,tsx}\"",
    "compile": "tsc",
    "build": "concurrently -n \"format,lint,compile\" -c \"red,green,blue\" \"yarn format\" \"yarn lint\" \"yarn compile\" && theia-plugin pack",
    "watch": "tsc -w",
    "test": "if-env SKIP_TEST=true && echo 'skip test' || jest --forceExit",
    "test-watch": "jest --watchAll"
  },
  "engines": {
    "theiaPlugin": "next"
  },
  "theiaPlugin": {
    "backend": "lib/main.js"
  },
  "jest": {
    "collectCoverage": true,
    "collectCoverageFrom": [
      "src/**/*.ts"
    ],
    "coverageDirectory": "./coverage",
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "modulePathIgnorePatterns": [
      "<rootDir>/dist"
    ],
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json"
    ]
  }
}
