#
# Copyright (c) 2021 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0

# Che-Theia workflow
dist: focal
os: linux
cache: false
git:
  depth: false 

language: node_js
node_js: "12.20.1"

before_install:
  - |
    if [[ "${TRAVIS_CPU_ARCH}" == "ppc64le" ]]; then
      # fix cpu count to avoid OOM failure
      cat /proc/stat > /tmp/stat
      sed -i '/^cpu[4-9]/d' /tmp/stat
      sed -i '/^cpu[0-9][0-9]/d' /tmp/stat
      sudo mount --bind /tmp/stat /proc/stat
    fi
install:
  # TODO when we're confident that sha-tagged travis-built images won't collide with GHA built ones, we can remove the -travis suffix here
  - export SHORT_SHA=$(git rev-parse --short HEAD)-travis
  - export GITHUB_TOKEN="$CHE_BOT_GITHUB_TOKEN"
  - echo "$RH_CHE_AUTOMATION_DOCKERHUB_PASSWORD" | docker login -u "$RH_CHE_AUTOMATION_DOCKERHUB_USERNAME" --password-stdin
  - echo "$QUAY_ECLIPSE_CHE_PASSWORD" | docker login quay.io -u "$QUAY_ECLIPSE_CHE_USERNAME" --password-stdin

env: 
  global:
  - TAG=next-travis
  - REGISTRY=quay.io
  - ORGANIZATION=eclipse
  - PR_NUMBER=

jobs:
  fast_finish: true
  allow_failures:
   - if: env(PR_NUMBER) IS present
     arch: arm64-graviton2
   - if: env(PR_NUMBER) IS present
     arch: ppc64le
   - if: env(PR_NUMBER) IS present
     arch: s390x
  include: 
    - &node-build
      stage: PR Check
      name: Node Build on amd64
      if: env(PR_NUMBER) IS present
      arch: amd64
      install:
        - sudo apt-get update && sudo apt-get install -y libsecret-1-dev
        - git fetch origin +refs/pull/${PR_NUMBER}/merge
        - git checkout -qf FETCH_HEAD
      script: yarn
    - <<: *node-build
      name: Node Build on arm64
      arch: arm64-graviton2
      group: edge
      virt: vm
    - <<: *node-build
      name: Node Build on ppc64le
      arch: ppc64le
    - <<: *node-build
      name: Node Build on s390x
      arch: s390x
    - &docker-build
      if: env(PR_NUMBER) IS present
      name: Docker build (Alpine) on amd64
      arch: amd64
      env: DIST=alpine
      install:
        - git fetch origin +refs/pull/${PR_NUMBER}/merge
        - git checkout -qf FETCH_HEAD
      script:
      - |
        set -e
        docker image prune -a -f
        docker pull quay.io/eclipse/che-theia-dev:next-travis && \
        docker tag quay.io/eclipse/che-theia-dev:next-travis eclipse/che-theia-dev:next-travis || true
        TAG=$TAG-${TRAVIS_CPU_ARCH} ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.$DIST
    - <<: *docker-build
      name: Docker build (Alpine) on arm64
      arch: arm64-graviton2
      group: edge
      virt: vm
    - <<: *docker-build
      name: Docker build (Alpine) on ppc64le
      arch: ppc64le
    - <<: *docker-build
      name: Docker build (Alpine) on s390x
      arch: s390x
    - <<: *docker-build
      name: Docker build (ubi8) on amd64
      arch: amd64
      env: DIST=ubi8
    - <<: *docker-build
      name: Docker build (ubi8) on arm64
      arch: arm64-graviton2
      group: edge
      virt: vm
      env: DIST=ubi8
    - <<: *docker-build
      name: Docker build (ubi8) on ppc64le
      arch: ppc64le
      env: DIST=ubi8
    - <<: *docker-build
      name: Docker build (ubi8) on s390x
      arch: s390x
      env: DIST=ubi8

    - &build-and-push-next
      stage: Build & Publish 'next-travis'
      name: Build & Publish image on amd64 
      if: type = api AND branch = main AND env(TAG) = "next-travis" AND env(THEIA_GITHUB_REPO) IS blank AND env(PR_NUMBER) IS blank
      arch: amd64
      script: 
      - |
        set -e
        docker image prune -a -f
        SUFFIX=travis-${TRAVIS_CPU_ARCH} TAG=$TAG-${TRAVIS_CPU_ARCH} ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --push
    - <<: *build-and-push-next
      arch: arm64-graviton2
      group: edge
      virt: vm
      name: Build & Publish image on arm64
    - <<: *build-and-push-next
      arch: ppc64le
      name: Build & Publish image on ppc64le
    - <<: *build-and-push-next
      arch: s390x
      name: Build & Publish image on s390x

    - stage: Publish multiarch image with 'next-travis' tag
      if: type = api AND branch = main AND env(TAG) = "next-travis" AND env(THEIA_GITHUB_REPO) IS blank AND env(PR_NUMBER) IS blank
      name: Publish multiarch image with next-travis tag
      script: .ci/travis/publish_multiarch.sh

    - &check-a-theia-branch
      stage: Check a Theia branch
      name: Build an image against Theia branch on amd64
      arch: amd64
      if: type = api AND env(THEIA_GITHUB_REPO) AND env(THEIA_BRANCH)
      script:
      - |
        set -e
        docker image prune -a -f
        docker pull quay.io/eclipse/che-theia-dev:next-travis
        docker tag quay.io/eclipse/che-theia-dev:next-travis eclipse/che-theia-dev:next-travis
        TAG=$TAG-${TRAVIS_CPU_ARCH} ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --build-args:THEIA_GITHUB_REPO=${THEIA_GITHUB_REPO} --branch:${THEIA_BRANCH}
    - <<: *check-a-theia-branch
      arch: arm64-graviton2
      group: edge
      virt: vm
      name: Build an image against Theia branch on arm64
    - <<: *check-a-theia-branch
      arch: ppc64le
      name: Build an image against Theia branch on ppc64le
    - <<: *check-a-theia-branch
      arch: s390x
      name: Build an image against Theia branch on s390x
    
    #Release Workflow
    - &release-che-theia
      stage: Release che-theia
      name: Build and publish image on amd64
      if: type = api AND env(TAG) IS present AND env(TAG) != "next-travis"
      arch: amd64
      script:
      - |  
        BRANCH=${TAG%.*}.x
        git checkout "${BRANCH}"
        TAG=$TAG-travis
        docker image prune -a -f
        SUFFIX=travis-${TRAVIS_CPU_ARCH} TAG=$TAG-${TRAVIS_CPU_ARCH} ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --push
    - <<: *release-che-theia
      arch: arm64-graviton2
      group: edge
      virt: vm
      name: Build and publish image on arm64
    - <<: *release-che-theia
      arch: ppc64le 
      name: Build and publish image on ppc64le
    - <<: *release-che-theia
      arch: s390x
      name: Build and publish image on s390x

    - stage: Publish multiarch image 
      if: type = api AND env(TAG) IS present AND env(TAG) != "next-travis"
      script: TAG=$TAG-travis .ci/travis/publish_multiarch.sh
